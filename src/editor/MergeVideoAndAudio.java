package editor;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import player.VidivoxPlayer;

import utility.StagedAudio;
import utility.StagedMedia;
import utility.StagedVideo;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.concurrent.Task;
import javafx.scene.control.ProgressBar;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;

/**
 * A Background Task which allows the user to overlay an mp3 file to a video.
 * When this task is completed the resulting video will be pushed to the local
 * MediaPlayer. The progress of this operation can be linked to a ProgressBar.
 * 
 * @author adav194
 * 
 */
public class MergeVideoAndAudio extends Task<StagedMedia> {
	private Media video;
	private StagedAudio audio;
	private ProgressBar bar;
	private DoubleProperty progress = new SimpleDoubleProperty(0);

	/**
	 * Specifies the specific video and audio which shall be combined. A
	 * ProgressBar may be included if desired, otherwise it may be left null.
	 * 
	 * @param video
	 * @param audio
	 * @param prog
	 */
	public MergeVideoAndAudio(Media video, StagedAudio audio, ProgressBar prog) {
		super();
		this.video = video;
		this.audio = audio;
		bar = prog;
		if (bar != null) {
			bar.progressProperty().bind(progress);
		}
	}

	@Override
	protected void updateProgress(double workDone, double totalWork) {
		super.updateProgress(workDone, totalWork);
		progress.set(workDone / totalWork);
	}

	@Override
	protected StagedMedia call() throws Exception {
		String pathVideo = video.getSource();
		String pathAudio = audio.getFile().getPath();
		StagedVideo output = new StagedVideo();
		System.out.println("Out: " + output.getFile().getAbsolutePath());
		String expansion = "ffmpeg -y -i " + pathVideo + " -i " + pathAudio
				+ " -filter_complex amix=inputs=2 -shortest "
				+ output.getFile().getAbsolutePath();
		String[] cmd = { "/bin/bash", "-c", expansion };
		ProcessBuilder pb = new ProcessBuilder(cmd);
		try {
			pb.redirectErrorStream(true);
			Process p = pb.start();
			bar.setVisible(true);
			this.updateProgress(0, video.getDuration().toSeconds());
			currentlyProcessed(p.getInputStream());
			p.waitFor();
			this.updateProgress(video.getDuration().toSeconds(), video
					.getDuration().toSeconds());
			VidivoxPlayer.getVPlayer(null).setMedia(output.getMedia());
			VidivoxPlayer.getVPlayer(null).getMediaPlayer().play();
		} catch (IOException | InterruptedException e) {
			e.printStackTrace();
		}
		bar.setVisible(false);
		return output; // TODO
	}

	/**
	 * This method is intended to be use on the output generated by the ffmpeg
	 * process responsible merging a video and audio together (See
	 * {@link #call()}). When used in this context, this method will update the
	 * progress property to indicate how much of the video has been processed.
	 * 
	 * @param in
	 */
	public void currentlyProcessed(InputStream in) {
		BufferedReader bin = new BufferedReader(new InputStreamReader(in));
		String line;
		Boolean processingStarted = false;
		try {
			while ((line = bin.readLine()) != null) {
				if (line.equals("Press [q] to stop, [?] for help")) {
					processingStarted = true;
				} else if (processingStarted & (line.indexOf("time=") != -1)) {
					line = line.substring(line.indexOf("time=") + 5,
							line.indexOf(" bitrate"));
					this.updateProgress(MediaConverter.timeToSeconds(line),
							video.getDuration().toSeconds());

				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return;
	}

}
